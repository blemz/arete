[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "arete"
version = "0.1.0"
description = "Graph-RAG AI tutoring system for classical philosophy"
authors = [
    {name = "Arete Development Team", email = "dev@arete.philosophy.edu"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["philosophy", "ai", "education", "graph-rag", "reflex"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "Intended Audience :: Researchers", 
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Framework :: Reflex",
]

dependencies = [
    "reflex>=0.3.0",
    "neo4j>=5.11.0",
    "weaviate-client>=3.24.0",
    "openai>=1.0.0",
    "langchain>=0.1.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "isort>=5.12.0", 
    "flake8>=6.1.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "pre-commit>=3.4.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "factory-boy>=3.3.0",
    "faker>=19.6.0",
]

docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/arete-org/arete"
Repository = "https://github.com/arete-org/arete.git"
Documentation = "https://arete.readthedocs.io"
"Bug Tracker" = "https://github.com/arete-org/arete/issues"

# Tool configurations

[tool.setuptools.packages.find]
where = ["."]
include = ["arete*"]
exclude = ["tests*", "docs*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | \.env
  | venv
  | env
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true
skip_glob = ["migrations/*.py"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
max-complexity = 10
select = ["C", "E", "F", "W", "B", "B950"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv",
    "migrations",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*.py:S101,D",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "migrations/",
    "tests/",
    ".venv/",
    "venv/",
]

[[tool.mypy.overrides]]
module = [
    "reflex.*",
    "neo4j.*", 
    "weaviate.*",
    "langchain.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "migrations", ".venv", "venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_subprocess

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=arete",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
    "reflex: marks tests as Reflex component tests",
    "performance: marks tests as performance tests",
    "accessibility: marks tests as accessibility tests",
    "security: marks tests as security tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["arete"]
omit = [
    "tests/*",
    "migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "Q",      # flake8-quotes
    "UP",     # pyupgrade
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PLC",    # pylint convention
    "PLE",    # pylint error
    "PLW",    # pylint warning
    "PIE",    # flake8-pie
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
exclude = [
    ".git",
    ".venv",
    "venv", 
    "__pycache__",
    "docs/",
    "build/",
    "dist/",
    "migrations/",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["arete"]
known-third-party = ["reflex", "neo4j", "weaviate", "openai"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "arete/__init__.py:__version__",
]

[tool.semantic_release]
version_variable = [
    "arete/__init__.py:__version__",
    "pyproject.toml:version",
]
build_command = "pip install build && python -m build"
upload_to_release = true
upload_to_pypi = false
remove_dist = false

# Reflex specific configuration
[tool.reflex]
app_name = "arete"
compile_timeout = 60
debug = false